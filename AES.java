
public class AES 
{
	public static final int[][] sbox = 
		{{0x63, 0x7c, 0x77, 0x7b, 0xf2, 0x6b, 0x6f, 0xc5, 0x30, 0x01, 0x67, 0x2b, 0xfe, 0xd7, 0xab, 0x76}, 
				{0xca, 0x82, 0xc9, 0x7d, 0xfa, 0x59, 0x47, 0xf0, 0xad, 0xd4, 0xa2, 0xaf, 0x9c, 0xa4, 0x72, 0xc0}, 
				{0xb7, 0xfd, 0x93, 0x26, 0x36, 0x3f, 0xf7, 0xcc, 0x34, 0xa5, 0xe5, 0xf1, 0x71, 0xd8, 0x31, 0x15}, 
				{0x04, 0xc7, 0x23, 0xc3, 0x18, 0x96, 0x05, 0x9a, 0x07, 0x12, 0x80, 0xe2, 0xeb, 0x27, 0xb2, 0x75}, 
				{0x09, 0x83, 0x2c, 0x1a, 0x1b, 0x6e, 0x5a, 0xa0, 0x52, 0x3b, 0xd6, 0xb3, 0x29, 0xe3, 0x2f, 0x84}, 
				{0x53, 0xd1, 0x00, 0xed, 0x20, 0xfc, 0xb1, 0x5b, 0x6a, 0xcb, 0xbe, 0x39, 0x4a, 0x4c, 0x58, 0xcf}, 
				{0xd0, 0xef, 0xaa, 0xfb, 0x43, 0x4d, 0x33, 0x85, 0x45, 0xf9, 0x02, 0x7f, 0x50, 0x3c, 0x9f, 0xa8}, 
				{0x51, 0xa3, 0x40, 0x8f, 0x92, 0x9d, 0x38, 0xf5, 0xbc, 0xb6, 0xda, 0x21, 0x10, 0xff, 0xf3, 0xd2}, 
				{0xcd, 0x0c, 0x13, 0xec, 0x5f, 0x97, 0x44, 0x17, 0xc4, 0xa7, 0x7e, 0x3d, 0x64, 0x5d, 0x19, 0x73}, 
				{0x60, 0x81, 0x4f, 0xdc, 0x22, 0x2a, 0x90, 0x88, 0x46, 0xee, 0xb8, 0x14, 0xde, 0x5e, 0x0b, 0xdb}, 
				{0xe0, 0x32, 0x3a, 0x0a, 0x49, 0x06, 0x24, 0x5c, 0xc2, 0xd3, 0xac, 0x62, 0x91, 0x95, 0xe4, 0x79}, 
				{0xe7, 0xc8, 0x37, 0x6d, 0x8d, 0xd5, 0x4e, 0xa9, 0x6c, 0x56, 0xf4, 0xea, 0x65, 0x7a, 0xae, 0x08}, 
				{0xba, 0x78, 0x25, 0x2e, 0x1c, 0xa6, 0xb4, 0xc6, 0xe8, 0xdd, 0x74, 0x1f, 0x4b, 0xbd, 0x8b, 0x8a}, 
				{0x70, 0x3e, 0xb5, 0x66, 0x48, 0x03, 0xf6, 0x0e, 0x61, 0x35, 0x57, 0xb9, 0x86, 0xc1, 0x1d, 0x9e}, 
				{0xe1, 0xf8, 0x98, 0x11, 0x69, 0xd9, 0x8e, 0x94, 0x9b, 0x1e, 0x87, 0xe9, 0xce, 0x55, 0x28, 0xdf}, 
				{0x8c, 0xa1, 0x89, 0x0d, 0xbf, 0xe6, 0x42, 0x68, 0x41, 0x99, 0x2d, 0x0f, 0xb0, 0x54, 0xbb, 0x16}};

	public static final int[][] invsbox = 
		{{0x52, 0x09, 0x6a, 0xd5, 0x30, 0x36, 0xa5, 0x38, 0xbf, 0x40, 0xa3, 0x9e, 0x81, 0xf3, 0xd7, 0xfb}, 
				{0x7c, 0xe3, 0x39, 0x82, 0x9b, 0x2f, 0xff, 0x87, 0x34, 0x8e, 0x43, 0x44, 0xc4, 0xde, 0xe9, 0xcb}, 
				{0x54, 0x7b, 0x94, 0x32, 0xa6, 0xc2, 0x23, 0x3d, 0xee, 0x4c, 0x95, 0x0b, 0x42, 0xfa, 0xc3, 0x4e}, 
				{0x08, 0x2e, 0xa1, 0x66, 0x28, 0xd9, 0x24, 0xb2, 0x76, 0x5b, 0xa2, 0x49, 0x6d, 0x8b, 0xd1, 0x25}, 
				{0x72, 0xf8, 0xf6, 0x64, 0x86, 0x68, 0x98, 0x16, 0xd4, 0xa4, 0x5c, 0xcc, 0x5d, 0x65, 0xb6, 0x92}, 
				{0x6c, 0x70, 0x48, 0x50, 0xfd, 0xed, 0xb9, 0xda, 0x5e, 0x15, 0x46, 0x57, 0xa7, 0x8d, 0x9d, 0x84}, 
				{0x90, 0xd8, 0xab, 0x00, 0x8c, 0xbc, 0xd3, 0x0a, 0xf7, 0xe4, 0x58, 0x05, 0xb8, 0xb3, 0x45, 0x06}, 
				{0xd0, 0x2c, 0x1e, 0x8f, 0xca, 0x3f, 0x0f, 0x02, 0xc1, 0xaf, 0xbd, 0x03, 0x01, 0x13, 0x8a, 0x6b}, 
				{0x3a, 0x91, 0x11, 0x41, 0x4f, 0x67, 0xdc, 0xea, 0x97, 0xf2, 0xcf, 0xce, 0xf0, 0xb4, 0xe6, 0x73}, 
				{0x96, 0xac, 0x74, 0x22, 0xe7, 0xad, 0x35, 0x85, 0xe2, 0xf9, 0x37, 0xe8, 0x1c, 0x75, 0xdf, 0x6e}, 
				{0x47, 0xf1, 0x1a, 0x71, 0x1d, 0x29, 0xc5, 0x89, 0x6f, 0xb7, 0x62, 0x0e, 0xaa, 0x18, 0xbe, 0x1b}, 
				{0xfc, 0x56, 0x3e, 0x4b, 0xc6, 0xd2, 0x79, 0x20, 0x9a, 0xdb, 0xc0, 0xfe, 0x78, 0xcd, 0x5a, 0xf4}, 
				{0x1f, 0xdd, 0xa8, 0x33, 0x88, 0x07, 0xc7, 0x31, 0xb1, 0x12, 0x10, 0x59, 0x27, 0x80, 0xec, 0x5f}, 
				{0x60, 0x51, 0x7f, 0xa9, 0x19, 0xb5, 0x4a, 0x0d, 0x2d, 0xe5, 0x7a, 0x9f, 0x93, 0xc9, 0x9c, 0xef}, 
				{0xa0, 0xe0, 0x3b, 0x4d, 0xae, 0x2a, 0xf5, 0xb0, 0xc8, 0xeb, 0xbb, 0x3c, 0x83, 0x53, 0x99, 0x61}, 
				{0x17, 0x2b, 0x04, 0x7e, 0xba, 0x77, 0xd6, 0x26, 0xe1, 0x69, 0x14, 0x63, 0x55, 0x21, 0x0c, 0x7d}};


	public static final int[] rcon = 
		{0x8d, 0x01, 0x02, 0x04, 0x08, 0x10, 0x20, 0x40, 0x80, 0x1b, 0x36, 0x6c, 0xd8, 0xab, 0x4d, 0x9a,
				0x2f, 0x5e, 0xbc, 0x63, 0xc6, 0x97, 0x35, 0x6a, 0xd4, 0xb3, 0x7d, 0xfa, 0xef, 0xc5, 0x91, 0x39,
				0x72, 0xe4, 0xd3, 0xbd, 0x61, 0xc2, 0x9f, 0x25, 0x4a, 0x94, 0x33, 0x66, 0xcc, 0x83, 0x1d, 0x3a,
				0x74, 0xe8, 0xcb, 0x8d, 0x01, 0x02, 0x04, 0x08, 0x10, 0x20, 0x40, 0x80, 0x1b, 0x36, 0x6c, 0xd8,
				0xab, 0x4d, 0x9a, 0x2f, 0x5e, 0xbc, 0x63, 0xc6, 0x97, 0x35, 0x6a, 0xd4, 0xb3, 0x7d, 0xfa, 0xef,
				0xc5, 0x91, 0x39, 0x72, 0xe4, 0xd3, 0xbd, 0x61, 0xc2, 0x9f, 0x25, 0x4a, 0x94, 0x33, 0x66, 0xcc,
				0x83, 0x1d, 0x3a, 0x74, 0xe8, 0xcb, 0x8d, 0x01, 0x02, 0x04, 0x08, 0x10, 0x20, 0x40, 0x80, 0x1b,
				0x36, 0x6c, 0xd8, 0xab, 0x4d, 0x9a, 0x2f, 0x5e, 0xbc, 0x63, 0xc6, 0x97, 0x35, 0x6a, 0xd4, 0xb3,
				0x7d, 0xfa, 0xef, 0xc5, 0x91, 0x39, 0x72, 0xe4, 0xd3, 0xbd, 0x61, 0xc2, 0x9f, 0x25, 0x4a, 0x94,
				0x33, 0x66, 0xcc, 0x83, 0x1d, 0x3a, 0x74, 0xe8, 0xcb, 0x8d, 0x01, 0x02, 0x04, 0x08, 0x10, 0x20,
				0x40, 0x80, 0x1b, 0x36, 0x6c, 0xd8, 0xab, 0x4d, 0x9a, 0x2f, 0x5e, 0xbc, 0x63, 0xc6, 0x97, 0x35,
				0x6a, 0xd4, 0xb3, 0x7d, 0xfa, 0xef, 0xc5, 0x91, 0x39, 0x72, 0xe4, 0xd3, 0xbd, 0x61, 0xc2, 0x9f,
				0x25, 0x4a, 0x94, 0x33, 0x66, 0xcc, 0x83, 0x1d, 0x3a, 0x74, 0xe8, 0xcb, 0x8d, 0x01, 0x02, 0x04,
				0x08, 0x10, 0x20, 0x40, 0x80, 0x1b, 0x36, 0x6c, 0xd8, 0xab, 0x4d, 0x9a, 0x2f, 0x5e, 0xbc, 0x63,
				0xc6, 0x97, 0x35, 0x6a, 0xd4, 0xb3, 0x7d, 0xfa, 0xef, 0xc5, 0x91, 0x39, 0x72, 0xe4, 0xd3, 0xbd,
				0x61, 0xc2, 0x9f, 0x25, 0x4a, 0x94, 0x33, 0x66, 0xcc, 0x83, 0x1d, 0x3a, 0x74, 0xe8, 0xcb};

	//used in mixColumns
	public static final int[][] mix = 
		{{0x02, 0x03, 0x01, 0x01},
				{0x01, 0x02, 0x03, 0x01},
				{0x01, 0x01, 0x02, 0x03},
				{0x03, 0x01, 0x01, 0x02}};

	public static byte[] encrypt(byte[] message, byte[] key)
	{
		//find number of blocks
		int numBlocks;
		if(message.length % 16 == 0)
			numBlocks = message.length/16;
		else
			numBlocks = message.length/16 + 1;

		byte[][] blocks = new byte[numBlocks][16];
		int current = 0;

		//block off bytes
		for(int i = 0; i < blocks.length - 1; i++)
			for(int j = 0; j < 16; j++)
				blocks[i][j] = message[current++];

		//pad last block
		int paddingStart;
		if(message.length % 16 == 0)
			paddingStart = 16;
		else
			paddingStart = message.length % 16;
		for(int i = 0; i < 16; i++)
		{
			if(i < paddingStart)
				blocks[blocks.length - 1][i] = message[current++];
			else
				blocks[blocks.length - 1][i] = 0;
		}

		//encryption
		for(int i = 0; i < blocks.length; i++)
			blocks[i] = encryptBlock(blocks[i], key);

		//make output array
		byte[] output = new byte[blocks.length*16];
		current = 0;
		for(byte[] array: blocks)
			for(int i = 0; i < array.length; i++)
				output[current++] = array[i];

		return output;
	}

	public static byte[] decrypt(byte[] message, byte[] key)
	{
		byte[][] blocks = new byte[message.length/16][16];
		int current = 0;

		//block off bytes
		for(int i = 0; i < blocks.length; i++)
			for(int j = 0; j < 16; j++)
				blocks[i][j] = message[current++];

		//decryption
		for(int i = 0; i < blocks.length; i++)
			blocks[i] = decryptBlock(blocks[i], key);
		
		//output into one array
		byte[] plain = new byte[message.length];
		current = 0;
		for(int i = 0; i < blocks.length; i++)
			for(int j = 0; j < 16; j++)
				plain[current++] = blocks[i][j];
		
		//amount of padding is unknown to decryption, we find it here
		int padding = 0;
		current = plain.length - 1;
		while(plain[current--] == 0x00)
			padding++;
		
		//remove padding
		byte[] output = new byte[plain.length - padding];
		for(int i = 0; i < plain.length - padding; i++)
			output[i] = plain[i];

		return output;
	}

	//repeated block encryption used in encrypt
	private static byte[] encryptBlock(byte[] plainText, byte[] key)
	{
		byte[][] plainState = byteArrayToState(plainText);
		byte[][] keyState = byteArrayToState(key);
		byte[][][] roundKeys = generateRoundKeys(keyState);		

		//initial round 0
		plainState = addRoundKey(plainState, roundKeys[0]);

		//rounds 1-9
		for(int i = 1; i < 10; i++)
		{
			plainState = substitutebytes(plainState);
			plainState = shiftRows(plainState);
			plainState = mixColumns(plainState);
			plainState = addRoundKey(plainState, roundKeys[i]);
		}

		//final round
		plainState = substitutebytes(plainState);
		plainState = shiftRows(plainState);
		plainState = addRoundKey(plainState, roundKeys[10]);

		return stateTobyteArray(plainState);

	}

	private static byte[] decryptBlock(byte[] cipherText, byte[] key)
	{
		byte[][] cipherState = byteArrayToState(cipherText);
		byte[][] keyState = byteArrayToState(key);
		byte[][][] roundKeys = generateRoundKeys(keyState);

		//inverse final round
		cipherState = addRoundKey(cipherState, roundKeys[10]);
		cipherState = inverseShiftRows(cipherState);
		cipherState = inverseSubstitutebytes(cipherState);

		//inverse rounds 9-1
		for(int i = 9; i > 0; i--)
		{
			cipherState = addRoundKey(cipherState, roundKeys[i]);
			inverseMixColumns(cipherState);
			cipherState = inverseShiftRows(cipherState);
			cipherState = inverseSubstitutebytes(cipherState);			
		}

		//inverse initial round
		cipherState = addRoundKey(cipherState, roundKeys[0]);

		return stateTobyteArray(cipherState);
	}

	private static byte[][][] generateRoundKeys(byte[][] keyState)
	{
		//[# of keys][AES state][AES state]
		byte[][][] keys = new byte[11][4][4];
		keys[0] = keyState; //original key is first round key
	
		for(int i = 0; i < 10; i++)
		{
			//gets current key
			byte[][] current = new byte[4][4];
			for(int j = 0; j < 4; j++)
				for(int k = 0; k < 4; k++)
					current[k][j] = keys[i][k][j];
			byte[] last = new byte[4];
			//gets last four bits
			for(int j = 0; j < 4; j++)
				last[j] = current[j][current.length - 1];		
			last = scheduleCore(last, i + 1);
			//temp XOR first 4 bits of previous
			for(int j = 0; j < 4; j++)
				current[j][0] = (byte) (current[j][0] ^ last[j]);
			for(int j = 1; j < 4; j++)
				for(int k = 0; k < 4; k++)
					current[k][j] = (byte)(current[k][j] ^ current[k][j - 1]);
			keys[i + 1] = current;
		}
	
		return keys;
	}

	//used while making round keys
	private static byte[] scheduleCore(byte[] array, int round)
	{
		//shifts bits one to the left
		byte temp = array[0];
		for(int j = 0; j < array.length - 1; j++)
			array[j] = array[j+1];
		array[array.length - 1] = temp;

		//exchanges with SBox
		String arrayString = toHexString(array);
		for(int i = 0; i < array.length; i++)
		{
			int cord = sbox[Character.getNumericValue(arrayString.charAt(2*i))][Character.getNumericValue(arrayString.charAt(2*i + 1))];
			array[i] = (byte) cord;
		}

		//Adds RCon
		byte RC = (byte) rcon[round];		
		array[0] = (byte) (array[0] ^ RC);		
		arrayString = toHexString(array);

		return array;

	}

	//adds round key
	private static byte[][] addRoundKey(byte[][] state, byte[][] roundKey)
	{
		byte [][] temp = new byte[4][4];
		for(int i = 0; i < 4; i++)
			for(int j = 0; j < 4; j++)
				temp[i][j] = (byte) (state[i][j] ^ roundKey[i][j]);
		return temp;
	}

	//substitutes from S-Box
	private static byte[][] substitutebytes(byte[][] array)
	{
		byte [][] nu = new byte[4][4];
		String arrayString;
		byte[] temp = new byte[1];
		int cord;
		for(int i = 0; i < array.length; i++)
			for(int j = 0; j < array.length; j++)
			{
				temp[0] = array[i][j];
				arrayString = toHexString(temp);
				cord = sbox[Character.getNumericValue(arrayString.charAt(0))][Character.getNumericValue(arrayString.charAt(1))];
				nu[i][j] = (byte) cord;
			}
		return nu;
	}

	//substitutes from inverse S-Box
	private static byte[][] inverseSubstitutebytes(byte[][] array)
	{
		byte [][] nu = new byte[4][4]; //temporary state to be returned
		String arrayString;
		byte[] temp = new byte[1];
		int cord;
		for(int i = 0; i < array.length; i++)
			for(int j = 0; j < array.length; j++)
			{
				temp[0] = array[i][j];
				arrayString = toHexString(temp);
				//finds numerical values of hex characters to index the invsbox
				cord = invsbox[Character.getNumericValue(arrayString.charAt(0))][Character.getNumericValue(arrayString.charAt(1))];
				nu[i][j] = (byte) cord;
			}
		return nu;
	}

	private static byte[][] shiftRows(byte[][] array)
	{
		byte[][] temp = new byte[4][4];	
		for(int i = 0; i < 4; i++)
			for(int j = 0; j < 4; j++)
				temp[i][j] = array[i][(j + i) % 4];
		return temp;
	}

	

	private static byte[][] inverseShiftRows(byte[][] array)
	{
		byte[][] temp = new byte[4][4];

		for(int i = 0; i < 4; i++)
			for(int j = 0; j < 4; j++)
				temp[i][j] = array[i][((j - i)+4) % 4];

		return temp;
	}

	private static byte[][] mixColumns(byte[][] array)
	{
		byte[][] temp = new byte[4][4];

		for(int i = 0; i < 4; i++)
			for(int j = 0; j < 4; j++)
				temp[j][i] = (byte) (poly(mix[j][0],array[0][i])^poly(mix[j][1],array[1][i])^poly(mix[j][2],array[2][i])^poly(mix[j][3],array[3][i]));

		return temp;
	}

	//used in mixing columns
	private static byte poly(int power, int b)
	{
		int h;
		if(b < 0)
			h = 0xff;
		else
			h = 0;
		if(power == 1)
			return (byte) b;
		else if(power == 2)
			return (byte) ((b << 1)^(0x1B & h)); //Wikipedia told us so
		else
			return (byte) (((b << 1)^(0x1B & h))^b);
	}
	
	//you wrote this
	private static void inverseMixColumns(byte[][] state)
	{
		final int SIZE = 4;
		byte[] a = new byte[SIZE];  

		for( int j = 0; j < SIZE; j++ )
		{

			for( int i = 0; i < SIZE; i++)
				a[i] = state[i][j];

			state[0][j] = (byte) (galoisMultiply(a[0],14) ^ galoisMultiply(a[3],9) ^ galoisMultiply(a[2],13) ^ galoisMultiply(a[1],11));
			state[1][j] = (byte) (galoisMultiply(a[1],14) ^ galoisMultiply(a[0],9) ^ galoisMultiply(a[3],13) ^ galoisMultiply(a[2],11));
			state[2][j] = (byte) (galoisMultiply(a[2],14) ^ galoisMultiply(a[1],9) ^ galoisMultiply(a[0],13) ^ galoisMultiply(a[3],11));
			state[3][j] = (byte) (galoisMultiply(a[3],14) ^ galoisMultiply(a[2],9) ^ galoisMultiply(a[1],13) ^ galoisMultiply(a[0],11));
		}
	}

	//this too
	private static byte galoisMultiply(int a, int b)
	{
		int p = 0;	
		int highBit;

		for( int i = 0; i < 8; i++)
		{
			if((b & 1) == 1) 
				p ^= a;
			highBit = a & 0x80;
			a <<= 1;
			if(highBit == 0x80) 
				a ^= 0x1b;		
			b >>= 1;
		}

		p &= 0xff;

		return (byte)p;
	}

	private static byte[] stateTobyteArray(byte[][] array)
	{
		byte[] bytes = new byte[16];
		for(int i = 0; i < 4; i++)
			for(int j = 0; j < 4; j++)
				bytes[4*i + j] = array[j][i];
	
		return bytes;
	}

	//used in sbox substituting and testing
	static String toHexString(byte[] bytes)
	{
		char[] hexArray = {'0','1','2','3','4','5','6','7','8','9','a','b','c','d','e','f'};
		char[] hexChars = new char[bytes.length * 2];
		int v;
		for ( int j = 0; j < bytes.length; j++ ) 
		{
			v = bytes[j] & 0xFF;
			hexChars[j*2] = hexArray[v/16];
			hexChars[j*2 + 1] = hexArray[v%16];
		}
		return new String(hexChars);
	}

	private static byte[][] byteArrayToState(byte[] key)
	{
		byte[][] state = new byte[4][4];
		int index = 0;
		for(int i = 0; i < 4; i++)
			for(int j = 0; j < 4; j++)
				state[j][i] = key[index++];
	
		return state;
	}
}
